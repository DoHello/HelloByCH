package com.derbysoft.controller.cms;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import sun.nio.cs.ext.MacHebrew;

import com.derbysoft.controller.service.BaseDaoController;
import com.derbysoft.dao.cms.NewsDao;
import com.derbysoft.entity.AlarmCallTime;
import com.derbysoft.entity.cms.Article;
import com.derbysoft.entity.cms.CaseStatus;
import com.derbysoft.entity.cms.GmsAlarmCall;
import com.derbysoft.entity.cms.GmsAlarmCheack;
import com.derbysoft.entity.cms.GmsAlarmReceive;
import com.derbysoft.entity.cms.JPush;
import com.derbysoft.entity.cms.Message;
import com.derbysoft.entity.cms.News;
import com.derbysoft.entity.cms.TimeAndContext;
import com.derbysoft.entity.sys.SYS_RoleButton;
import com.derbysoft.entity.sys.SYS_User;

import dy.hrtworkframe.controller.base.BaseController;
import dy.hrtworkframe.db.SQLUtil;
import dy.hrtworkframe.entity.Pager;
import dy.hrtworkframe.entity.User;
import dy.hrtworkframe.util.Const;
import dy.hrtworkframe.util.DateUtil;
import dy.hrtworkframe.util.ExportUtils;
import dy.hrtworkframe.util.MessageUtil;
import dy.hrtworkframe.util.SortUtil;
import dy.hrtworkframe.util.UUIDUtil;

@Transactional
@Controller("case")
@RequestMapping("case.do")
public class CaseCollection extends BaseDaoController {
	@Resource(name="newsDao")
	private NewsDao newsDao;
	
//	@Resource(name="messageDao")
//	private MessageDao messageDao;
	//这是保存反馈
	@RequestMapping(params="p=saveMessage")
	public @ResponseBody Map<String, Object> saveMessage  (HttpSession session,@ModelAttribute Message message)  {		
		try {
			String context = message.getContext();
			SYS_User user = (SYS_User) session.getAttribute(Const.SESSION_USER);
			pd = getPageData();
			message.setPhone(user.getPhone());
			message.setCreateTime(DateUtil.getDateString());
			message.setUserID(user.getUserID());
			if(context.length()<11){
				message.setTitle(context);
			}else{message.setTitle(getTitle(context, 10));
			}
			message.setUserName(user.getUserName());
			message.setMessageID(UUIDUtil.get32UUID());
			
			newsDao.insert(message);
			
			/*pd.put("newsList", newsList);*/
           	return MessageUtil.success();			
		} catch (Exception e) {
			return MessageUtil.error();
		}
	}
	public String  getTitle (String context,int i)  {	
	String str = context.substring(0,i);
    return str;
    }
	
	
/*	@RequestMapping(params="p=casejPush")
	public @ResponseBody Map<String, Object> casejPush  (HttpSession session,@ModelAttribute SYS_User entity)  {		
		try {
			
		} catch (Exception e) {
			return MessageUtil.error();
		}
	}*/

	
	@RequestMapping(params="p=findPolice")
	public @ResponseBody Pager findPolice1(Pager pager, HttpSession session,
			HttpServletRequest request, HttpServletResponse response,SYS_User entity) throws Exception {
		try {		
			String w = "UserName like '%" + pager.getParameters().get("searchText") + "%'"  + SQLUtil.getWhereClause(pager) + " and  isWorking= 'okworking'";

				if (pager.getIsExport()) {
					if (pager.getExportAllData()) {
						pager.setExportDatas(newsDao.query(SQLUtil.getQuerySQL(SYS_User.class)));
					}
					try { 
						ExportUtils.export(request, response, pager);
					} catch (Exception e) {
						e.printStackTrace();
					}
					return null;
				}
			
				if (pager.getPageSize() == 0) {
					
					String sql = SQLUtil.getQuerySQL(SYS_User.class) + " where " + w;
					
				} else {
					
					pager.setAdvanceQuerySorts(SortUtil.sortBuild1("InputDate", "desc"));
					newsDao.queryCount(pager, SYS_User.class, w);
					newsDao.queryPager(pager, SYS_User.class, w);
					pager.setIsSuccess(true);
				}
				
				if (pager.getIsExport()) {
					if (pager.getExportAllData()) {
						pager.setExportDatas(newsDao.query(SQLUtil.getQuerySQL(SYS_User.class)));
					}
					try {
						ExportUtils.export(request, response, pager);
					} catch (Exception e) {
						e.printStackTrace();
					}
					return null;
				}
				if (pager.getPageSize() == 0) {
					
					String sql = SQLUtil.getQuerySQL(SYS_User.class) + " where " + w;
					pager.setExhibitDatas(newsDao.query(SYS_User.class, sql));
					
				} else {
					
					pager.setAdvanceQuerySorts(SortUtil.sortBuild1("InputDate", "desc"));
					newsDao.queryCount(pager, SYS_User.class, w);
					newsDao.queryPager(pager, SYS_User.class, w);
					pager.setIsSuccess(true);
				}
			
		} catch (Exception e) {
			e.printStackTrace();
			pager.setIsSuccess(false);
		}
/*		SYS_User sys_User2 = new SYS_User();
		sys_User2.setIsWorking("okWorking");
		List<SYS_User> query = newsDao.query(sys_User2);
		//request.getSession().setAttribute("sys_user", query);
		pager.setSys_user(query);*/
		GmsAlarmCall gmsAlarmCall = new GmsAlarmCall();
		gmsAlarmCall.setAlarmID(entity.getAlarmID());
		List<GmsAlarmCall> query = newsDao.query(gmsAlarmCall);
		List<SYS_User> police = this.getPolice(query.get(0));
		pager.setExhibitDatas(police);
		pager.setIsSuccess(true);
		
		return pager;
	}
	
	
	//参看推送的设置
	@RequestMapping(params="p=jPush")
	public ModelAndView jPush(HttpSession session) throws Exception {
        
	    User user = (User) session.getAttribute(Const.SESSION_USER);
		pd = getPageData();
		try {
			//mv.addObject("model", pd);
			List<JPush> query = newsDao.query(JPush.class);
			JPush jPush = query.get(0);			
			mv.setViewName("/cms/case/case_view");
		    pd.put("jPush", jPush);
		    mv.addObject("model", pd);
		} catch (Exception e) {
			return MessageUtil.exception(user, mv, e);
		}		
		return MessageUtil.success(mv);

	}
	
	@RequestMapping(params="p=policeView")
	public ModelAndView policeView(@RequestParam("moduleID") String moduleID,HttpSession session) throws Exception {
        
	    User user = (User) session.getAttribute(Const.SESSION_USER);
		pd = getPageData();
		try {
			//mv.addObject("model", pd);
			//获取用户权限按钮
			String sql = "select * "
					+ " from SYS_RoleButton "
					+ " where ModuleID= '" + moduleID + "' ";
			pd.put("userbutton", newsDao.query(SYS_RoleButton.class, sql));
			List<JPush> query = newsDao.query(JPush.class);
			JPush jPush = query.get(0);			
			mv.setViewName("/cms/case/case_policeview");
		    pd.put("jPush", jPush);
		    mv.addObject("model", pd);
		} catch (Exception e) {
			return MessageUtil.exception(user, mv, e);
		}		
		return MessageUtil.success(mv);

	}
	
	@RequestMapping(params="p=jPush1")
	public ModelAndView UpdateJPush(HttpSession session,JPush entity ) throws Exception {
        
	    User user = (User) session.getAttribute(Const.SESSION_USER);
		pd = getPageData();
		try {
			//mv.addObject("model", pd);
			List<JPush> query = newsDao.query(JPush.class);
			JPush jPush = query.get(0);
			String num = entity.getPolicejPushPeople();
			String num1=entity.getPolicejPushTime();
			
			String rex = "/^[1-9]+\\d*$";
			Pattern p = Pattern.compile(rex);
			Matcher m = p.matcher(num);
			Matcher m1 = p.matcher(num1);

		    pd.put("jPush", jPush);
		    mv.addObject("model", pd);
		} catch (Exception e) {
			return MessageUtil.exception(user, mv, e);
		}
		
		return MessageUtil.success(mv);

	}
	
	@RequestMapping(params = "p=add")
	public @ResponseBody Map<String,Object> add(@ModelAttribute Message  entity, HttpSession session) {
		SYS_User user = (SYS_User) session.getAttribute(Const.SESSION_USER);
		try {
			
			entity.setCreateTime(DateUtil.getDateTimeString());
			
			newsDao.insert(entity);
		} catch (Exception e) {
			return MessageUtil.exception(user, e);
		}
		
		return MessageUtil.success();
	}
	
	@RequestMapping(params = "p=eyeCase")
	public @ResponseBody Map<String,Object> eyeCase(@ModelAttribute GmsAlarmCall  entity, HttpSession session) {
		SYS_User user = (SYS_User) session.getAttribute(Const.SESSION_USER);
		try {
			List<GmsAlarmCall> query = newsDao.query(entity);
			GmsAlarmCall call = query.get(0);			
			mv.setViewName("/cms/case/case_eye");
		    pd.put("call", call);
		    mv.addObject("model", pd);
	        
			//entity.setCreateTime(DateUtil.getDateTimeString());
			//newsDao.insert(entity);
		} catch (Exception e) {
			return MessageUtil.exception(user, e);
		}
		
		return MessageUtil.success();
	}
	
	
	
	
	@RequestMapping(params = "p=eyeView")
	public ModelAndView showEyeView(Message entity, HttpSession session) {
		User user = (User) session.getAttribute(Const.SESSION_USER);
		pd = getPageData();
		//pd.put("NewsState", systemDicDao.findByCategory("infoType"));
		//pd.put("NewsFocus", systemDicDao.findByCategory("NewsFocus"));
		pd.put("entity", newsDao.queryByPrimary(entity));
		try {
			mv.addObject("model", pd);
			mv.setViewName("/cms/case/case_jPush");
			
		} catch (Exception e) {
			return MessageUtil.exception(user, mv, e);
		}
		
		return MessageUtil.success(mv);
	}
	
	
	
	
	
	
	@RequestMapping(params = "p=showAddView")
	public ModelAndView showAddView(@ModelAttribute Message entity, HttpSession session) {
		
		User user = (User) session.getAttribute(Const.SESSION_USER);
		try {
			String sql = SQLUtil.getQuerySQL(Message.class) ;
			List<Message> range = newsDao.query(Message.class, sql);
			mv.addObject("model", getPageData().put("range", range));
			mv.setViewName("/cms/message/message_add");
		} catch (Exception e) {
			return MessageUtil.exception(user, mv, e);
		}
		return MessageUtil.success(mv);
	}
	
	
	
	@RequestMapping(params = "p=upload")
	public @ResponseBody Map<String,Object> edit(@ModelAttribute JPush entity, HttpSession session) throws Exception {
		SYS_User user = (SYS_User) session.getAttribute(Const.SESSION_USER);
		try {
/*			String rex = "^[1-9]\d*$";
			Pattern p = Pattern.compile(rex);
			Matcher m = p.matcher(num);
			if (m.find()){
			sysout("match!");
			}*/
		    List<JPush> query = newsDao.query(JPush.class);
			JPush jPush = query.get(0);
		    if(!entity.getPolicejPushPeople().matches("^[1-9]\\d*$")){
			return MessageUtil.error();	
			}
			if(!entity.getPolicejPushTime().matches("^[1-9]\\d*$")){
			return MessageUtil.error();	
			}	
			String userID = user.getUserID();
			entity.setUserID(userID);
			entity.setInputDate(DateUtil.getDateTimeString());
			entity.setPolicejPushID(jPush.getPolicejPushID());
			newsDao.update(entity);
		} catch (Exception e) {
			return MessageUtil.exception(user, e);
		}
		
		return MessageUtil.success();
	}
	
	
	@RequestMapping(params = "p=del")
	public @ResponseBody Map<String,Object> del(@ModelAttribute Message entity, HttpSession session) {
		User user = (User) session.getAttribute(Const.SESSION_USER);
		try {
			newsDao.delete(entity);
		} catch (Exception e) {
			return MessageUtil.exception(user, e);
		}
		
		return MessageUtil.success();
	}
	
	
	@RequestMapping(params = "p=find")
	public @ResponseBody Pager find( Pager pager, HttpSession session,
			HttpServletRequest request, HttpServletResponse response) {
		try {		
			String w = "UserName like '%" + pager.getParameters().get("searchText") + "%'"  + SQLUtil.getWhereClause(pager) ;

				if (pager.getIsExport()) {
					if (pager.getExportAllData()) {
						pager.setExportDatas(newsDao.query(SQLUtil.getQuerySQL(GmsAlarmCall.class)));
					}
					try { 
						ExportUtils.export(request, response, pager);
					} catch (Exception e) {
						e.printStackTrace();
					}
					return null;
				}
			
				if (pager.getPageSize() == 0) {
					
					String sql = SQLUtil.getQuerySQL(GmsAlarmCall.class) + " where " + w;
					
				} else {
					
					pager.setAdvanceQuerySorts(SortUtil.sortBuild1("InputDate", "desc"));
					newsDao.queryCount(pager, GmsAlarmCall.class, w);
					newsDao.queryPager(pager, GmsAlarmCall.class, w);
					pager.setIsSuccess(true);
				}
				
				if (pager.getIsExport()) {
					if (pager.getExportAllData()) {
						pager.setExportDatas(newsDao.query(SQLUtil.getQuerySQL(Article.class)));
					}
					try {
						ExportUtils.export(request, response, pager);
					} catch (Exception e) {
						e.printStackTrace();
					}
					return null;
				}
				if (pager.getPageSize() == 0) {
					
					String sql = SQLUtil.getQuerySQL(GmsAlarmCall.class) + " where " + w;
					pager.setExhibitDatas(newsDao.query(Article.class, sql));
					
				} else {
					
					pager.setAdvanceQuerySorts(SortUtil.sortBuild1("InputDate", "desc"));
					newsDao.queryCount(pager, GmsAlarmCall.class, w);
					newsDao.queryPager(pager, GmsAlarmCall.class, w);
					pager.setIsSuccess(true);
				}
			
		} catch (Exception e) {
			e.printStackTrace();
			pager.setIsSuccess(false);
		}
/*		SYS_User sys_User2 = new SYS_User();
		sys_User2.setIsWorking("okWorking");
		List<SYS_User> query = newsDao.query(sys_User2);
		//request.getSession().setAttribute("sys_user", query);
		pager.setSys_user(query);
		pager.setIsSuccess(true);*/
		
		return pager;
	}
	
	
	@RequestMapping(params = "p=policeFind")
	public @ResponseBody Pager policeFind( Pager pager, HttpSession session,
			HttpServletRequest request, HttpServletResponse response) {
		try {
			
			String w = "UserName like '%" + pager.getParameters().get("searchText") + "%'"  + SQLUtil.getWhereClause(pager) ;

				if (pager.getIsExport()) {
					if (pager.getExportAllData()) {
						pager.setExportDatas(newsDao.query(SQLUtil.getQuerySQL(Message.class)));
					}
					try { 
						ExportUtils.export(request, response, pager);
					} catch (Exception e) {
						e.printStackTrace();
					}
					return null;
				}
			
				if (pager.getPageSize() == 0) {
					
					String sql = SQLUtil.getQuerySQL(Message.class) + " where " + w;
					
				} else {
					
					pager.setAdvanceQuerySorts(SortUtil.sortBuild1("CreateTime", "desc"));
					newsDao.queryCount(pager, Message.class, w);
					newsDao.queryPager(pager, Message.class, w);
					pager.setIsSuccess(true);
				}
				
				if (pager.getIsExport()) {
					if (pager.getExportAllData()) {
						pager.setExportDatas(newsDao.query(SQLUtil.getQuerySQL(Article.class)));
					}
					try {
						ExportUtils.export(request, response, pager);
					} catch (Exception e) {
						e.printStackTrace();
					}
					return null;
				}
			
				if (pager.getPageSize() == 0) {
					
					String sql = SQLUtil.getQuerySQL(Message.class) + " where " + w;
					pager.setExhibitDatas(newsDao.query(Article.class, sql));
					
				} else {
					
					pager.setAdvanceQuerySorts(SortUtil.sortBuild1("CreateTime", "desc"));
					newsDao.queryCount(pager, Message.class, w);
					newsDao.queryPager(pager, Message.class, w);
					pager.setIsSuccess(true);
				}
			
		} catch (Exception e) {
			e.printStackTrace();
			pager.setIsSuccess(false);
		}
		
		pager.setIsSuccess(true);
		return pager;
	}
	
	
	@RequestMapping(params="p=jPushPolice")
	public ModelAndView jPushPolice(HttpSession session) throws Exception {
        
	    SYS_User user = (SYS_User) session.getAttribute(Const.SESSION_USER);
		pd = getPageData();
		try {
			//mv.addObject("model", pd);
			List<JPush> query = newsDao.query(JPush.class);
			JPush jPush = query.get(0);			
			mv.setViewName("/cms/case/case_view");
		    pd.put("jPush", jPush);
		    mv.addObject("model", pd);
		} catch (Exception e) {
			return MessageUtil.exception(user, mv, e);
		}		
		return MessageUtil.success(mv);

	}
	
	
	//页面跳转
	@RequestMapping(params="p=cheackView")
	public ModelAndView cheackView(HttpSession session , @RequestParam("moduleID") String moduleID) throws Exception {
        
	    SYS_User user = (SYS_User) session.getAttribute(Const.SESSION_USER);
		pd = getPageData();
		try {
			String sql = "select * "
					+ " from SYS_RoleButton "
					+ " where ModuleID= '" + moduleID + "' ";
			pd.put("userbutton", newsDao.query(SYS_RoleButton.class, sql));
			mv.addObject("model", pd);
			//mv.addObject("model", pd);
			
			//List<JPush> query = newsDao.query(JPush.class);
			//JPush jPush = query.get(0);			
			mv.setViewName("/cms/case/case_cheackView");
		    //pd.put("jPush", jPush);
		    
			//mv.addObject("model", pd);
		} catch (Exception e) {
			return MessageUtil.exception(user, mv, e);
		}		
		return MessageUtil.success(mv);

	}
	
	
	
	@RequestMapping(params = "p=findCheack")
	public @ResponseBody Pager findCheack( Pager pager, HttpSession session,
			HttpServletRequest request, HttpServletResponse response) {
		
	
        String sql="select a.* , b.InputDate as calltime , b.username as callPhone , b.addressname as calladdressname , b.MessageText as callContext   from (select * from gms_alarm_receive  where Ischeack='okcheack' and  AlarmID like '%" + pager.getParameters().get("searchText") + "%' ) a , gms_alarm_call b where  a.alarmid=b.alarmid order by calltime asc";
		List<GmsAlarmReceive> query = newsDao.query(GmsAlarmReceive.class,sql);
		pager.setExhibitDatas(query);		
		pager.setIsSuccess(true);
		return pager;
		
	}
	//p=cheackEye
	
	@RequestMapping(params = "p=cheackEye")
	public  ModelAndView eyeCheack( @ModelAttribute GmsAlarmReceive  entity, HttpSession session) {
		SYS_User user = (SYS_User) session.getAttribute(Const.SESSION_USER);
		try {
		    String w="select a.* , b.InputTime as cheackTime , b.context as cheackContext from  (select * from  gms_alarm_receive where AlarmID='3' and `Ischeack`='okCheack') a  , (select * from gms_alarm_cheack where  AlarmID='3')  b  where  a.alarmid=b.alarmid ";
			List<GmsAlarmReceive> query2 = newsDao.query(GmsAlarmReceive.class, w);

			GmsAlarmReceive gmsAlarmReceive = query2.get(0);			
			String receiveDate = gmsAlarmReceive.getInputDate();//
			GmsAlarmCall gmsAlarmCall = new GmsAlarmCall();
			gmsAlarmCall.setAlarmID(entity.getAlarmID());
			List<GmsAlarmCall> query = newsDao.query(gmsAlarmCall);
			GmsAlarmCall gmsAlarmCall2 = query. get(0);
			String callDate = gmsAlarmCall2.getInputDate();
            GmsAlarmCheack gmsAlarmCheack = new GmsAlarmCheack();
            gmsAlarmCheack.setAlarmID(entity.getInputDate());
			List<GmsAlarmCheack> query3 = newsDao.query(gmsAlarmCheack);
            GmsAlarmCheack gmsAlarmCheack2 = query3.get(0);
   			String cheackTime = gmsAlarmCheack2.getInputTime();
   			List<TimeAndContext> list =new ArrayList<TimeAndContext>();
   		    //上面是求时间的
   			String w2="select * from  caseStatus where alarmid = " + entity.getAlarmID() + " order by inputdate asc";
   			List<CaseStatus> query4 = newsDao.query(CaseStatus.class, w2);
   			list = this.createList(list, callDate,"报警时间");
   			list = this.createList(list,receiveDate ,"接警时间");
   			list = this.createList(list, cheackTime, "备案");
   			for(int i=0; query4.size()>i ; i++){
   				 CaseStatus caseStatus = query4.get(i);
   			   list = this.createList(list, query4.get(i).getInputDate(),query4.get(i).getStatus());
   			}
   			//			 
		    
			//		
		    pd.put("receive", gmsAlarmReceive);
		    pd.put("call",gmsAlarmCall2);
		    
		    pd.put("time",list);
		    mv.addObject("model", pd);
			mv.setViewName("/cms/case/case_eyeCheack");
			//entity.setCreateTime(DateUtil.getDateTimeString());
			//newsDao.insert(entity);
		} catch (Exception e) {
			return MessageUtil.exception(user, mv, e);
}
		
		return MessageUtil.success(mv);
	}
	
	@RequestMapping(params = "p=updatecCheack")
	public @ResponseBody Map<String,Object> updatecCheack(@ModelAttribute GmsAlarmCheack  entity ,HttpSession session) {
		SYS_User user = (SYS_User) session.getAttribute(Const.SESSION_USER);
		try {
            String w="insert into caseStatus(alarmID,inputDate,Status) values('"+entity.getAlarmID()+"','"+DateUtil.getDateString()+"');";
            newsDao.jdbcTemplate.update(w);
	        
            
			//entity.setCreateTime(DateUtil.getDateTimeString());
			//newsDao.insert(entity);
		} catch (Exception e) {
			return MessageUtil.exception(user, e);
		}
		
		return MessageUtil.success();
	}
	
	
	public  List<TimeAndContext> createList(List<TimeAndContext> entity,String time,String context){
	TimeAndContext timeAndContext = new TimeAndContext();
	  timeAndContext.setContext(context);
	  timeAndContext.setTime(time);
      entity.add(timeAndContext);	
      return entity;
	}
	
	
	
}