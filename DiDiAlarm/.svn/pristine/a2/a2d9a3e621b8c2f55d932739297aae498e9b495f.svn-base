package com.derbysoft.controller.cms;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import net.sf.json.JSONObject;

import org.apache.commons.codec.digest.DigestUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.derbysoft.dao.cms.MemberAndNews;
import com.derbysoft.dao.cms.NewsDao;
import com.derbysoft.dao.cms.User_NewsDao;
import com.derbysoft.entity.cms.GmsAlarmCall;
import com.derbysoft.entity.cms.GmsAlarmCheack;
import com.derbysoft.entity.cms.GmsAlarmReceive;
import com.derbysoft.entity.cms.Message;
import com.derbysoft.entity.cms.News;
import com.derbysoft.entity.sys.SYS_User;
import com.derbysoft.redis.service.NewsService;
import com.derbysoft.redis.service.RedisService;
import com.derbysoft.redis.service.UserService;
import com.derbysoft.service.sys.CaseService;
import com.derbysoft.service.sys.PoliceService;

import dy.hrtworkframe.controller.base.BaseController;
import dy.hrtworkframe.util.DateUtil;
import dy.hrtworkframe.util.MessageUtil;
import dy.hrtworkframe.util.StringUtil;
import dy.hrtworkframe.util.UUIDUtil;


@Transactional
@Controller("Police")
@RequestMapping("police.do")



public class PoliceController extends BaseController {
    @Autowired
    private NewsService newsService;
	@Autowired
	private RedisService redisServcie;
	@Autowired
	private NewsDao newsDao;
	@Autowired
	private User_NewsDao user_NewsDao;
	@Autowired
	private UserService userService;
	@Autowired
	private CaseService caseService;
	@Autowired
	private PoliceService policeService;
	//这是警察个人信息
	@RequestMapping(params = "p=appEyeView")
	public @ResponseBody Map<String, Object> showEyeView( HttpSession session,@RequestBody JSONObject Body) throws Exception {
		   JSONObject fromObject = JSONObject.fromObject(Body);
	       String tokenID=fromObject.getString("tokenID");
	      SYS_User user = userService.getRedisAPPUser(DigestUtils.md5Hex(tokenID), SYS_User.class);
		Map<String, SYS_User> model = new HashMap<String, SYS_User>();
		try {     	      
	 	          String phone = StringUtil.replace(3, user.getPhone().length(), user.getPhone(), "******");     	
                  String idCard = StringUtil.replace(6, user.getIdCard().length(), user.getIdCard(),"*********");
                  user.setPhone(phone);
                  user.setIdCard(idCard);  
                  model.put("model", user);
			//mv.setViewName("/system/user/system_user_eye");
		} catch (Exception e) {
			return MessageUtil.error("MSG6",500);
		}
		return MessageUtil.success(model,"MSG1",200);
	}
	@RequestMapping(params = "p=isWorking")
	@ResponseBody
	public Map<String, Object> isWorking( HttpSession session,@RequestBody JSONObject Body) throws Exception {
		try {
		String tokenID=Body.getString("tokenID");
		String isWorking=Body.getString("isWorking");
		//Object longitude=Body.get("longitude");
		//Object latitude=Body.get("latitude");
		
		
		if(tokenID==null||isWorking==null){
			    return MessageUtil.error("MSG7",407);
		}
		try{
		SYS_User user = userService.getRedisAPPUser(DigestUtils.md5Hex(tokenID), SYS_User.class);
		
		//Map<String, SYS_User> model = new HashMap<String, SYS_User>();
		user.setIsWorking(isWorking);
		if("okWorking".equals(isWorking)){
//			try{
//				 double a = Double.parseDouble(longitude.toString());
//				 double b = Double.parseDouble(latitude.toString());
//				}catch(Exception e)
//				{
//					e.printStackTrace();
//					return MessageUtil.error("MSG29",429);
//				}
			user.setIsWorking(isWorking);
			userService.setUsersAddress(user);
		}else
		if("noWorking".equals(isWorking)){
			userService.delUsersAddress(user);
		}else{
			return MessageUtil.error("MSG6",500);
		}
		}catch(Exception e){
			e.printStackTrace();
			 return MessageUtil.error("MSG7",407);
		}
			return MessageUtil.success("MSG1",200);
		} catch (Exception e) {
			e.printStackTrace();
			return MessageUtil.error("MSG6",500);
		}
         
	  
		//sreturn MessageUtil.success(model,"MSG1",200);

	}
	//警员端的收藏信息
	@RequestMapping(params = "p=collectNews")
	public @ResponseBody Map<String, Object> CollectNews(HttpSession session,
			@RequestBody JSONObject Body) throws Exception {
		   JSONObject fromObject = JSONObject.fromObject(Body);
	       String tokenID=fromObject.getString("tokenID");
	      SYS_User user = userService.getRedisAPPUser(DigestUtils.md5Hex(tokenID), SYS_User.class);
		String newsID = (String) fromObject.get("newsID");
		try {
			MemberAndNews memberAndNews = new MemberAndNews();
			String userID = user.getUserID();
			memberAndNews.setUserID(userID);
			memberAndNews.setNewsID(newsID);
			List<MemberAndNews> query = user_NewsDao.query(memberAndNews);
			if(query.size()>0){
				return MessageUtil.error("MSG104",104);
			}
			user_NewsDao.insert(memberAndNews);
			return MessageUtil.success("MSG1",200);
		} catch (Exception e) {
			return MessageUtil.error("MSG6",500);
		}
	}
	//警员端的取消收藏
	@RequestMapping(params = "p=cancelNews")
	public @ResponseBody Map<String, Object> CancelNews(HttpSession session,
		@RequestBody JSONObject Body) throws Exception {
		   JSONObject fromObject = JSONObject.fromObject(Body);
	       String tokenID=fromObject.getString("tokenID");
	      SYS_User user = userService.getRedisAPPUser(DigestUtils.md5Hex(tokenID), SYS_User.class);
		 String newsID = (String) fromObject.get("newsID");
		try {
			MemberAndNews memberAndNews = new MemberAndNews();
			String userID = user.getUserID();
			memberAndNews.setUserID(userID);
			memberAndNews.setNewsID(newsID);
			List<MemberAndNews> query = newsService.queryPeopleConllect(memberAndNews);

			if(query.size()<1){
				return MessageUtil.error("MSG103",103);
			}
			
	/*		String w="DELETE from cms_user_news where newsID='"+newsID+"'and userid='"+userID+"'";
			//user_NewsDao.delete(memberAndNews);
			newsDao.jdbcTemplate.execute(w);*/
			News news = new News();
			news.setNewsID(newsID);
			news.setUserID(userID);
			newsService.delPeopleConllect(news);
			
			return MessageUtil.success("MSG1",200);
		} catch (Exception e) {
			return MessageUtil.error("MSG6",500);
		}
	}
	//显示警员端的收藏信息
	@RequestMapping(params ="p=findNews")
	public @ResponseBody Map<String,Object> findNews(HttpSession session,@RequestBody JSONObject Body) throws Exception {
		   JSONObject fromObject = JSONObject.fromObject(Body);
	       String tokenID=fromObject.getString("tokenID");
	      SYS_User user = userService.getRedisAPPUser(DigestUtils.md5Hex(tokenID), SYS_User.class);
	    try {
	    	int page=fromObject.getInt("page");
	    	/*int i= (page-1)*10;
	    	
	    	String w="SELECT * from cms_news ,cms_user_news where cms_news.NewsID=cms_user_news.NewsID and cms_user_news.UserID= ? order by publishTime desc LIMIT "+i+" ,10";
			
	    	List<Object> args = new ArrayList<Object>();
			args.add(user.getUserID());
			List<News> querys = newsDao.query(News.class, w,
					args.toArray());*/
			Map<String,Object> params = new HashMap<String, Object>();
			params.put("model",newsService.findCollectionOfPolice(user, page));
			return MessageUtil.success(params,"MSG1",200);  
	    } catch (Exception e) {
	    	return MessageUtil.error("MSG6",500);
	    }	
}
    //这是警员端的版本信息(没用)
	/*@RequestMapping(params = "p=edition")
	public @ResponseBody Map<String, Object> Edition(){
		try {
			List<PoliceEdition> query = newsDao.query(PoliceEdition.class);
			PoliceEdition policeEdition2 = query.get(0);
			HashMap<String, PoliceEdition> map = new HashMap<String, PoliceEdition>();
			map.put("model",policeEdition2);
			return MessageUtil.success(map, "MSG1", 200);
		} catch (Exception e) {
			return MessageUtil.error("MSG6",500);
		}	
	}*/

/*	//取消登陆
	@RequestMapping(params = "offline")
	public @ResponseBody Map<String, Object> Offline(HttpSession session){
	    try {
			session.invalidate();
		} catch (Exception e) {
          return MessageUtil.error(2,2,2,2);
		}
		return MessageUtil.success(1,1,1,1);
	}*/
	//查找所有的新闻
	/*@RequestMapping(params ="

AllNews")
	public @ResponseBody Map<String,Object> findAllNews(@ModelAttribute News news ,HttpSession session) throws Exception {
		SYS_User user = (SYS_User) session.getAttribute(Const.SESSION_USER);
		
		try {
			String w = " 1=1 and state =  ?  or state = ? ";
			List<Object> args = new ArrayList<Object>();
			args.add("2");
			args.add("3");
			String sql = SQLUtil.getQuerySQL(News.class) + " where " + w;
			List<News> querys = newsDao.query(News.class, sql,
					args.toArray());
			//这是找那些是收藏的news
			String w1 = " 1=1 and userid =  ? ";
			List<Object> args1 = new ArrayList<Object>();
			args1.add(user.getUserID());
			String sql1 = SQLUtil.getQuerySQL(MemberAndNews.class) + " where " + w1;
			List<MemberAndNews> querys1 = user_NewsDao.query(MemberAndNews.class, sql1,
					args1.toArray());
			
			for(MemberAndNews  memberAndNews:querys1){
				for(News news1 :querys){
					if(news1.getNewsID().equals(memberAndNews.getNewsID())){
						news1.setCollectState("1");
					}else{news1.setCollectState("0");
					}
				}
			}
            Map<String, List<MemberAndNews>> hashMap = new HashMap<String, List<MemberAndNews>>();
            hashMap.put("model",querys1);
			return MessageUtil.success(hashMap,"MSG200",200);
		} catch (Exception e) {
			return MessageUtil.error("MSG6",500);
		}
		
}*/
	
/*	@RequestMapping(params = "p=findAllNews1")
	public @ResponseBody Map<String, Object> findAllNews1(
			 HttpSession session,@RequestBody JSONObject Body) throws Exception {
		   JSONObject fromObject = JSONObject.fromObject(Body);
	       String tokenID=fromObject.getString("tokenID");
	      SYS_User user = userService.getRedisAPPUser(tokenID, SYS_User.class);
	       String userID = user.getUserID();
 	    String w1="select * from (select b.* , 'okCollect' as collectState from (SELECT * from  cms_user_news where userid="+"'"+userID+"'"+") a LEFT JOIN  (select * from cms_news where State='policeNews' or State='allNews') b   on b.newsid=a.newsid   UNION select * , 'noCollect' as collectState from cms_news where newsid  not in (select NewsID from cms_user_news where userid="+"'"+userID+"'"+") and State= 'policeNews' or State='allNews' ) c order BY c.updatetime DESC";
 		try {					
 			List<Map<String, Object>> query = newsDao.query(w1);
 			HashMap<String, List<Map<String, Object>>> hashMap = new HashMap<String, List<Map<String, Object>>>();
 			hashMap.put("model", query);
 			return MessageUtil.success(hashMap, "MSG1",200);
		} catch (Exception e) {
			return MessageUtil.error("MSG6",500);
		}
	}	*/
	
	//警察端查看所有新闻
	@RequestMapping(params = "p=findAllNews2")
	public @ResponseBody Map<String, Object> findAllNews2(
			 HttpSession session ,@RequestBody JSONObject Body) throws Exception {
		   JSONObject fromObject = JSONObject.fromObject(Body);
	       String tokenID=fromObject.getString("tokenID");
	       SYS_User user = userService.getRedisAPPUser(DigestUtils.md5Hex(tokenID), SYS_User.class);
           String userID = user.getUserID();
           int page=fromObject.getInt("page");
 //String w5="select * from (select b.* , 'okCollect' as collectState from (SELECT * from  cms_user_news where userid="+"'"+userID+"'"+") a LEFT JOIN  (select * from (select * from cms_news where  PublishState='all' or PublishState= 'police' ) t where    t.FocusStatus='yesFocus'   AND t.State= 'notice' ) b   on b.newsid=a.newsid   UNION select * , 'noCollect' as collectState from (select * from cms_news where  PublishState='all' or PublishState= 'police' ) t where t.newsid  not in (select NewsID from cms_user_news where userid="+"'"+userID+"'"+") and t.State= 'notice' and t.FocusStatus='yesFocus' ) c order BY c.updatetime DESC";	       
 	       try {	
 		    HashMap<String, List<News>>  newsMap= newsService.queryAllNewsBySYS_UserID(page, userID);
 			return MessageUtil.success(newsMap, "MSG1",200);
		} catch (Exception  e) {
			return MessageUtil.error("MSG6",500);
		}
	}
	
	@RequestMapping(params = "p=findAllNews3")
	public @ResponseBody Map<String, Object> findAllNews3(
			 HttpSession session ,@RequestBody JSONObject Body) throws Exception {
		   JSONObject fromObject = JSONObject.fromObject(Body);
	       String tokenID=fromObject.getString("tokenID");
	       int page=fromObject.getInt("page");
	       SYS_User user = userService.getRedisAPPUser(DigestUtils.md5Hex(tokenID), SYS_User.class);
           String userID = user.getUserID();
       try{
            HashMap<String, List<News>> hashMap = newsService.queryAllNoticeBySYS_UserID(page, userID);
 			return MessageUtil.success(hashMap, "MSG1",200);
		} catch (Exception  e) {
			return MessageUtil.error("MSG6",500);
		}
	}

	
	//找备案的接警
	@RequestMapping(params = "p=receive")
	public @ResponseBody Map<String, Object> findReceive(
			 HttpSession session,@RequestBody JSONObject Body) throws Exception {
		  JSONObject fromObject = JSONObject.fromObject(Body);
	      String tokenID=fromObject.getString("tokenID");
	      int page=fromObject.getInt("page");
	      SYS_User user = userService.getRedisAPPUser(DigestUtils.md5Hex(tokenID), SYS_User.class);
         // SYS_User user = new SYS_User();
         // user.setUserID("1231231231");
        try {		
        	
        	//int i= (page-1)*10;
	        //String w="select * from (select * from gms_alarm_call where  AlarmID in (select AlarmID from gms_alarm_receive where AlarmRefuseID  is  null  and ischeack='okcheack' and userid ='"+user.getUserID()+"' )) a LEFT JOIN (select InputDate as receiveUpdate ,AlarmID , AlarmReceiveID from gms_alarm_receive where AlarmRefuseID  is  null  and ischeack='okcheack' and userid ='"+user.getUserID()+"' ) b ON b.AlarmID=a.AlarmID where 1=1 ORDER BY a.inputdate DESC LIMIT "+i+" ,10";
 			//List<Map<String, Object>> query = newsDao.query(w);
 			//List<GmsAlarmCall> query2 = newsDao.query(GmsAlarmCall.class, w);
 			HashMap<String,List<GmsAlarmCall>> hashMap = new HashMap<String,List<GmsAlarmCall>>();
 			hashMap.put("model", policeService.findByCategoryByUserID(page, user));
 			return MessageUtil.success(hashMap, "MSG1",200);
		} catch (Exception e) {
			return MessageUtil.error("MSG6",500);
		}
	}		
	//找未备案的接警
	
	@RequestMapping(params = "p=findNoCheack")
	public @ResponseBody Map<String, Object> findCheack(
			 HttpSession session,@RequestBody JSONObject Body) throws Exception {
		JSONObject fromObject = JSONObject.fromObject(Body);
	    String tokenID=fromObject.getString("tokenID");
	    int page = fromObject.getInt("page");
	    
	    SYS_User user = userService.getRedisAPPUser(DigestUtils.md5Hex(tokenID), SYS_User.class);
	   /* int i= (page-1)*10;
        String w="select * from (select * from gms_alarm_call where  AlarmID in (select AlarmID from gms_alarm_receive where  ischeack='nocheack' and userid ='"+user.getUserID()+"' )) a LEFT JOIN (select InputDate as receiveUpdate ,AlarmID , AlarmReceiveID from gms_alarm_receive where  ischeack='nocheack' and userid ='"+user.getUserID()+"' ) b ON b.AlarmID=a.AlarmID where 1=1 ORDER BY a.inputdate DESC LIMIT "+i+" ,10";
        */
	    try {					
 			//List<Map<String, Object>> query = newsDao.query(w);
 			/*List<GmsAlarmReceive> query = newsDao.query(GmsAlarmReceive.class,w);*/
        	HashMap<String, List<GmsAlarmReceive>> hashMap = new HashMap<String, List<GmsAlarmReceive>>();
 			hashMap.put("model", policeService.findNoCheackByUserID(page, user));
 			return MessageUtil.success(hashMap, "MSG1",200);
		} catch (Exception e) {
			return MessageUtil.error("MSG6",500);
		}
	}

	/**
	 * 
	     * @discription 上传警察反馈
	     * @author Knight      
	     * @created 2016年2月16日 上午11:06:53     
	     * @param session
	     * @param Body
	     * @return
	     * @throws Exception
	 */
	@RequestMapping(params="p=saveMessage")
	public @ResponseBody Map<String, Object> saveMessage  (HttpSession session,@RequestBody JSONObject Body) throws Exception {
		  try {  
		JSONObject fromObject = JSONObject.fromObject(Body);
	       String tokenID=fromObject.getString("tokenID");
	      SYS_User user = userService.getRedisAPPUser(DigestUtils.md5Hex(tokenID), SYS_User.class);
	       String context = fromObject.getString("context");
	       Message message = new Message();
	       message.setContext(context);
	       message.setPhone(message.getPhone());
	       message.setStatus("policeMessage");
		    message.setPhone(user.getPhone());
			message.setCreateTime(DateUtil.getDateString());
			message.setUserID(user.getUserID());
			message.setUserName(user.getRealName());
			message.setMessageID(UUIDUtil.get32UUID());
			newsService.addMessage(message);
			
			/*pd.put("newsList", newsList);*/
           	return MessageUtil.success("MSG1",200);			
		} catch (Exception e) {
			return MessageUtil.error("MSG6",500);
		}
	}
	
	//查找案件
	@RequestMapping(params="p=findCall")
	public @ResponseBody Map<String, Object> findCall  (HttpSession session,@RequestBody JSONObject Body) throws Exception {
		  try {  		  
		   JSONObject fromObject = JSONObject.fromObject(Body);
	       String alarmReceiveID = fromObject.getString("alarmReceiveID");
	       GmsAlarmReceive gmsAlarmReceive2 = caseService.findReceiveByReceiveID(alarmReceiveID);
	        
			GmsAlarmCall gmsAlarmCall2 = new GmsAlarmCall();
			List<GmsAlarmCall> callList = caseService.findCallByCheackID(gmsAlarmReceive2.getAlarmID());
			if(callList.size()>0){
			gmsAlarmCall2 = callList.get(0);
			}
			
            GmsAlarmCheack gmsAlarmCheack = new GmsAlarmCheack();
            gmsAlarmCheack.setAlarmReceiveID(alarmReceiveID);
            List<GmsAlarmCheack> query3 = newsDao.query(gmsAlarmCheack);
            GmsAlarmCheack gmsAlarmCheack2 = new GmsAlarmCheack();
            if(query3.size()>0){
               gmsAlarmCheack2 = query3.get(0);
            }
            HashMap<String, Object> hashMap = new HashMap<String, Object>();
            
            hashMap.put("call", gmsAlarmCall2);
            hashMap.put("cheack", gmsAlarmCheack2);
            hashMap.put("receive", gmsAlarmReceive2);
            return MessageUtil.success(hashMap,"MSG1",200);			
		} catch (Exception e) {
			return MessageUtil.error("MSG6",500);
		}
	}
	
	
}
