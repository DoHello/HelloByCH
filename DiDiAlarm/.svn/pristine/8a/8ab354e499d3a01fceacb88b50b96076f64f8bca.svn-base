package com.derbysoft.controller.cms;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;










































import com.derbysoft.controller.service.BaseDaoController;
import com.derbysoft.dao.cms.NewsDao;
import com.derbysoft.dao.sys.DicDao;
import com.derbysoft.dao.sys.RoleDao;
import com.derbysoft.entity.cms.News;
import com.derbysoft.entity.cms.PicUploadResult;
import com.derbysoft.entity.cms.User_News;
import com.derbysoft.entity.sys.SYS_ModuleButt;
import com.derbysoft.entity.sys.SYS_RoleButton;
import com.derbysoft.entity.sys.SYS_User;
import com.derbysoft.jms.activemq.JpushSender;

import dy.hrtworkframe.controller.base.BaseController;
import dy.hrtworkframe.db.SQLUtil;
import dy.hrtworkframe.entity.Pager;
import dy.hrtworkframe.entity.User;
import dy.hrtworkframe.util.Const;
import dy.hrtworkframe.util.DateUtil;
import dy.hrtworkframe.util.ExportUtils;
import dy.hrtworkframe.util.FileUpload;
import dy.hrtworkframe.util.MessageUtil;
import dy.hrtworkframe.util.SortUtil;
import dy.hrtworkframe.util.UUIDUtil;

@Transactional
@Controller("news")
@RequestMapping("news.do")
public class NewsController extends BaseDaoController {
	private static String PEOPLE = "AllPEOPLE";//发送给群众
	private static String POLICE = "AllPLICE";//发送给警察
	private static String ALL = "ALL";//所有平台
	@Autowired
	private JpushSender jpushSender;

	
	@Resource(name="systemDicDao")
    private DicDao systemDicDao;
	
	@Resource(name="newsDao")
	private NewsDao newsDao;
	
	@Resource(name = "roleDao")
	private RoleDao roleDao;
	
	@RequestMapping(params="p=view")
	public ModelAndView showListView(HttpSession session , @RequestParam("moduleID") String moduleID) throws Exception {
		User user = (User) session.getAttribute(Const.SESSION_USER);
		pd = getPageData();
		try {
			//获取用户权限按钮
			String sql = "select * "
					+ " from SYS_RoleButton "
					+ " where ModuleID= '" + moduleID + "' ";
			pd.put("userbutton", roleDao.query(SYS_RoleButton.class, sql));
			mv.addObject("model", pd);
			mv.setViewName("/cms/news/news_view");
		} catch (Exception e) {
			return MessageUtil.exception(user, mv, e);
		}
		
		return MessageUtil.success(mv);
	}
	
	
/*	@RequestMapping(params = "p=add")
	public @ResponseBody Map<String,Object> add(@ModelAttribute Article  entity, HttpSession session) {
		User user = (User) session.getAttribute(Const.SESSION_USER);
		try {
			entity.setCreateTime(DateUtil.getDateTimeString());
			entity.setLocalType("en_news");
			entity.setPublisher(user.getUserName());
			entity.setSortID("0");
			entity.setArticleID(UUIDUtil.get32UUID());
			newsDao.insert(entity);
		} catch (Exception e) {
			return MessageUtil.exception(user, e);
		}
		
		return MessageUtil.success();
	}*/
	
	@RequestMapping(params = "p=add")
	public @ResponseBody Map<String,Object> add(@ModelAttribute News  entity, HttpSession session) {
	     SYS_User user = (SYS_User) session.getAttribute(Const.SESSION_USER);
		try {	
			String dateTimeString = DateUtil.getDateTimeString();
			entity.setRealName(user.getRealName());
			entity.setCreateTime(dateTimeString);
			entity.setUpdateTime(dateTimeString);		
			entity.setUserID(user.getUserID());
	        entity.setPublishState("noPublish");
			entity.setNewsID(UUIDUtil.get32UUID());
			newsDao.insert(entity);
		} catch (Exception e) {
			return MessageUtil.exception(user, e);
		}
		
		return MessageUtil.success();
	}
	
	
	@RequestMapping(params = "p=eyeView")
	public ModelAndView showEyeView(News entity, HttpSession session) {
		User user = (User) session.getAttribute(Const.SESSION_USER);
		pd = getPageData();
		pd.put("NewsState", systemDicDao.findByCategory("infoType"));
		pd.put("NewsFocus", systemDicDao.findByCategory("NewsFocus"));
		pd.put("entity", newsDao.queryByPrimary(entity));
		try {
			mv.addObject("model", pd);
			mv.setViewName("/cms/news/news_eye");
			
		} catch (Exception e) {
			return MessageUtil.exception(user, mv, e);
		}
		
		return MessageUtil.success(mv);
	}
	
	
	@RequestMapping(params = "p=listPage")
	public ModelAndView listPage(News entity, HttpSession session) {
		User user = (User) session.getAttribute(Const.SESSION_USER);
		pd = getPageData();
		pd.put("entity", newsDao.queryByPrimary(entity));
		try {
			mv.addObject("model", pd);
			mv.setViewName("/webSite/news_detailed");
		} catch (Exception e) {
			return MessageUtil.exception(user, mv, e);
		}
		
		return MessageUtil.success(mv);
	}
	
	
	@RequestMapping(params = "p=showAddView")
	public ModelAndView showAddView(@ModelAttribute News entity, HttpSession session) {
		User user = (User) session.getAttribute(Const.SESSION_USER);
		try {
			String sql = SQLUtil.getQuerySQL(News.class) ;
			List<News> range = newsDao.query(News.class, sql);
			mv.addObject("model", getPageData().put("range", range));
			mv.setViewName("/cms/news/news_add");
		} catch (Exception e) {
			return MessageUtil.exception(user, mv, e);
		}
		
		return MessageUtil.success(mv);
	}
	
	
	
	@RequestMapping(params = "p=edit")
	public @ResponseBody Map<String,Object> edit(@ModelAttribute News entity, HttpSession session) throws Exception {
		SYS_User user = (SYS_User) session.getAttribute(Const.SESSION_USER);
		try {
			newsDao.update(entity);			
		} catch (Exception e) {
			return MessageUtil.exception(user, e);
		}
		
		return MessageUtil.success();
	}
	
	
	@RequestMapping(params = "p=del")
	public @ResponseBody Map<String,Object> del(@ModelAttribute News entity, HttpSession session) {
		User user = (User) session.getAttribute(Const.SESSION_USER);
		try {
			User_News user_News = new  User_News();
			user_News.setNewsID(entity.getNewsID());
			newsDao.delete(user_News);
			newsDao.delete(entity);
		} catch (Exception e) {
			return MessageUtil.exception(user, e);
		}
		
		return MessageUtil.success();
	}
	
	
	@RequestMapping(params = "p=find")
	public @ResponseBody Pager find( Pager pager, HttpSession session,
			HttpServletRequest request, HttpServletResponse response) {
		try {
			String w = "Title like '%" + pager.getParameters().get("searchText") + "%'"  + SQLUtil.getWhereClause(pager);

				if (pager.getIsExport()) {
					if (pager.getExportAllData()) {
						pager.setExportDatas(newsDao.query(SQLUtil.getQuerySQL(News.class)));
					}
					try {
						ExportUtils.export(request, response, pager);
					} catch (Exception e) {
						e.printStackTrace();
					}
					return null;
				}
			
				if (pager.getPageSize() == 0) {
					
					String sql = SQLUtil.getQuerySQL(News.class) + " where " + w;
					pager.setExhibitDatas(newsDao.query(News.class, sql));
					
				} else {
					
					pager.setAdvanceQuerySorts(SortUtil.sortBuild1("CreateTime", "desc"));
					newsDao.queryCount(pager, News.class, w);
					newsDao.queryPager(pager, News.class, w);
					pager.setIsSuccess(true);
				}
				
				if (pager.getIsExport()) {
					if (pager.getExportAllData()) {
						pager.setExportDatas(newsDao.query(SQLUtil.getQuerySQL(News.class)));
					}
					try {
						ExportUtils.export(request, response, pager);
					} catch (Exception e) {
						e.printStackTrace();
					}
					return null;
				}
			
				if (pager.getPageSize() == 0) {
					
					String sql = SQLUtil.getQuerySQL(News.class) + " where " + w;
					pager.setExhibitDatas(newsDao.query(News.class, sql));
					
				} else {
					
					pager.setAdvanceQuerySorts(SortUtil.sortBuild1("CreateTime", "desc"));
					newsDao.queryCount(pager, News.class, w);
					newsDao.queryPager(pager, News.class, w);
					pager.setIsSuccess(true);
				}
			
		} catch (Exception e) {
			e.printStackTrace();
			pager.setIsSuccess(false);
		}
	    List<?> exhibitDatas = pager.getExhibitDatas();
	    //Object object = exhibitDatas.get(0);
	    for(int i=0 ;i<exhibitDatas.size();i++){
	    	News news = (News)exhibitDatas.get(i);
	    	String publishState = news.getPublishState();
	    	if("member".equals(publishState)){
            news.setPublishState("群众");		}else 	
			if("police".equals(publishState)){
			news.setPublishState("警察");
			}else
			if("all".equals(publishState)){
		    news.setPublishState("所有人");
			}else{
				news.setPublishState("还未发布");
			}
	    }
		pager.setIsSuccess(true);
     /*   List<Map<String, Object>> exportDatas = pager.getExportDatas();
		for(int i=0;i<exportDatas.size();i++){
		 String publishState =(String) exportDatas.get(i).get("publishState");
		if("member".equals(publishState)){}
		exportDatas.get(i).put("publishState", "群众");
		
		if("police".equals(publishState)){
			exportDatas.get(i).put("publishState", "警察");
		}
		if("all".equals(publishState)){
			exportDatas.get(i).put("publishState", "所有人");
		}
        
	}*/
		return pager;}
	//新闻发布
	@RequestMapping(params = "p=publish")
	public @ResponseBody Map<String,Object> publish(@ModelAttribute News entity, HttpSession session) {
		User user = (User) session.getAttribute(Const.SESSION_USER);
		try {
			String dateString = DateUtil.getDateString();
			entity.setPublishTime(dateString);
			List<News> query = newsDao.query(entity);
			if(query.size()<0){
            	
            }
			News news = query.get(0);
			String publishState = news.getPublishState();
			if("noPublish".equals(publishState)){
				newsDao.update(entity);
				return MessageUtil.success();
			}
			if("all".equals(entity.getPublishState())){
				newsDao.update(entity);
				return MessageUtil.success();
			}
			newsDao.update(entity);
		} catch (Exception e) {
			return MessageUtil.exception(user, e);
		}
		return MessageUtil.success();
	}
	
	@RequestMapping(params = "p=cancelPublish")
	public @ResponseBody Map<String,Object> cancelpublish(@ModelAttribute News entity, HttpSession session) {
		User user = (User) session.getAttribute(Const.SESSION_USER);
		try {
			//String dateString = DateUtil.getDateString();
			//entity.setPublishTime(dateString);
			entity.setPublishState("noPublish");
			User_News user_News = new User_News();
			user_News.setNewsID(entity.getNewsID());


		  //  News news = query.get(0);
		   // String publishState = news.getPublishState();
		    newsDao.delete(user_News);
			newsDao.update(entity);
		} catch (Exception e) {
			return MessageUtil.exception(user, e);
		}
		return MessageUtil.success();
	}
	//新闻推送
	@RequestMapping(params = "p=push")
	public Map<String, Object> pust(News entity, HttpSession session) {
		try {
			//SYS_User user = (SYS_User) session.getAttribute(Const.SESSION_USER);
			Map<String, Object> m = new HashMap<String, Object>();
			String pushStatus = entity.getPushStatus();
			String infoType = entity.getInfoType();
			if ("news".equals(infoType)) {
				if ("pushMember".equals(pushStatus)) {
					m.put("type", "news");
					//m.put("type","notice");
					m.put("info", entity);
					jpushSender.send(m, PEOPLE);
					entity.setPushNum(entity.getPushNum() + 1);
				}
				if ("pushPolice".equals(pushStatus)) {
					m.put("type", "news");
					//m.put("type","notice");
					m.put("info", entity);
					jpushSender.send(m, POLICE);
					entity.setPushNum(entity.getPushNum() + 1);
				}
				if ("pushAll".equals(pushStatus)) {
					m.put("type", "news");
					//m.put("type","notice");
					m.put("info", entity);
					jpushSender.send(m, ALL);
					entity.setPushNum(entity.getPushNum() + 1);
				}

			} else {
				if ("pushMember".equals(pushStatus)) {
					m.put("type", "notice");
					//m.put("type","notice");
					m.put("info", entity);
					jpushSender.send(m, PEOPLE);
					entity.setPushNum(entity.getPushNum() + 1);
				}
				if ("pushPolice".equals(pushStatus)) {
					m.put("type", "notice");
					//m.put("type","notice");
					m.put("info", entity);
					jpushSender.send(m, POLICE);
					entity.setPushNum(entity.getPushNum() + 1);
				}
				if ("pushAll".equals(pushStatus)) {
					m.put("type", "notice");
					//m.put("type","notice");
					m.put("info", entity);
					jpushSender.send(m, ALL);
					entity.setPushNum(entity.getPushNum() + 1);
				}
			}
			newsDao.update(entity);
		} catch (Exception e) {
     return MessageUtil.error();
		}
		return MessageUtil.success();
	   
	}
	
	
	
	//新闻推送
	@RequestMapping(params = "p=push1")
	public Map<String, Object> pust1(News entity, HttpSession session) {
		SYS_User user = (SYS_User) session.getAttribute(Const.SESSION_USER);
		try {
			List<News> query = newsDao.query(entity);
            if(query.size()==0){
            	
            }
            Map<String, Object> m = new HashMap<String, Object>();
            News news = query.get(0);
            String state = news.getState();
			if("1".equals(state)){
			m.put("type", "news");
			//m.put("type","notice");
			m.put("info",news);
			jpushSender.send(m, POLICE);
			news.setPushStatus("已推送");
			}
			
			if("2".equals(state)){
			m.put("type", "news");
			//
			m.put("info",news);
			jpushSender.send(m, PEOPLE);
			news.setPushStatus("已推送");
			}
			
			if("3".equals(state)){
			m.put("type", "news");
			//m.put("type","notice");
			m.put("info",news);
			jpushSender.send(m, ALL);
			news.setPushStatus("已推送");
			}
			
			if("4".equals(state)){
			m.put("type","notice");
			//m.put("type","notice");
			m.put("info",news);
			jpushSender.send(m, POLICE);
			news.setPushStatus("已推送");
			}
			
			if("5".equals(state)){
			m.put("type","notice");
			//m.put("type","notice");
			m.put("info",news);
			jpushSender.send(m, PEOPLE);
			news.setPushStatus("已推送");
			}
			
			if("6".equals(state)){
			m.put("type","notice");
			//m.put("type","notice");
			m.put("info",news);
			jpushSender.send(m, ALL);
			news.setPushStatus("已推送");
			}
			
		} catch (Exception e) {
         MessageUtil.error("MSG108",108);
 		}	
		return MessageUtil.success("MSG1",200);
	}
	
	
	
	/**
	 * 上传图片2用于普通的上传
	 * @Title: checkFile1 
	 * @Description: TODO
	 * @param request
	 * @param file
	 * @param session
	 * @return
	 * @return: Map<String,Object>
	 */
	@RequestMapping(params = "p=checkFile2")
	public @ResponseBody Map<String, Object> checkFile2(
			HttpServletRequest request, //@RequestParam MultipartFile file,
			HttpSession session) {
//		BufferedReader reader;
//		try {
//			reader = request.getReader();
//			System.out.println(reader.readLine());
//		} catch (IOException e2) {
//			// TODO Auto-generated catch block
//			e2.printStackTrace();
//		}
		MultipartHttpServletRequest mureq = (MultipartHttpServletRequest) request;

		Map<String, MultipartFile> files = mureq.getFileMap(); 
/*		if (files == null || files.size() == 0) { 
			return MessageUtil.error(6, 6);
		} */
		Map.Entry<String, MultipartFile> e = files.entrySet().iterator().next(); 
		MultipartFile file = e.getValue(); 
		// 语音上传失败
		boolean isLegal = false;
		for (String type : IMAGE_TYPE) {
			if (StringUtils
					.endsWithIgnoreCase(file.getOriginalFilename(), type)) {
				isLegal = true;
				break;
			}
		}
		if (isLegal == false) {
			return MessageUtil.error("MSG9",410);
		}
		
		Map<String, Object> map = new HashMap<String, Object>();
		try {
//			Member user = (Member) session.getAttribute(Const.SESSION_HAS_MEMBER);
			String fileTureName = file.getOriginalFilename();
			String fileName = UUIDUtil.get32UUID();
			// filePath
			String filePath = this.getFilePathOfImg(fileName, request);

			String extName = "."
					+ StringUtils.substringAfterLast(fileTureName, ".");// 生成新的文件名
			FileUpload.fileUp(file, request.getServletContext().getRealPath("/")+filePath, fileName);
			map.put("filePath", filePath + fileName + extName);
		} catch (Exception e1) {
			e1.printStackTrace();
			return MessageUtil.error(6, 6);
		}
		return MessageUtil.success(map,1,1);
	}
	
	
	
	
	
	/**
	 * 上传图片
	 * @Title: checkFile1 
	 * @Description: TODO
	 * @param request
	 * @param file
	 * @param session
	 * @return
	 * @return: Map<String,Object>
	 */
	@RequestMapping(params = "p=checkFile")
	public @ResponseBody PicUploadResult checkFile(
			HttpServletRequest request, //@RequestParam MultipartFile file,
			HttpSession session) {
//		BufferedReader reader;
//		try {
//			reader = request.getReader();
//			System.out.println(reader.readLine());
//		} catch (IOException e2) {
//			// TODO Auto-generated catch block
//			e2.printStackTrace();
//		}
		MultipartHttpServletRequest mureq = (MultipartHttpServletRequest) request;
        PicUploadResult picUploadResult = new PicUploadResult();
		Map<String, MultipartFile> files = mureq.getFileMap(); 
		/*if (files == null || files.size() == 0) { 
			return MessageUtil.error(6, 6);
		} */
		Map.Entry<String, MultipartFile> e = files.entrySet().iterator().next(); 
		MultipartFile file = e.getValue(); 
		// 图片上传失败
		boolean isLegal = false;
		for (String type : IMAGE_TYPE) {
			if (StringUtils
					.endsWithIgnoreCase(file.getOriginalFilename(), type)) {
				isLegal = true;
				break;
			}
		}
		
		if (isLegal == false) {
			picUploadResult.setError(1);
			picUploadResult.setMessage("上传图片的图片格式不对");
		    return picUploadResult;
		}
		
		Map<String, Object> map = new HashMap<String, Object>();
		try {
//			Member user = (Member) session.getAttribute(Const.SESSION_HAS_MEMBER);
			String fileTureName = file.getOriginalFilename();
			String fileName = UUIDUtil.get32UUID();
			// filePath
			String filePath = this.getFilePath(fileName, request);

			String extName = "."
					+ StringUtils.substringAfterLast(fileTureName, ".");// 生成新的文件名
			FileUpload.fileUp(file, request.getServletContext().getRealPath("/")+filePath, fileName);
			map.put("filePath", filePath + fileName + extName);
			picUploadResult.setUrl(filePath + fileName + extName);
			picUploadResult.setError(0);
		} catch (Exception e1) {
			picUploadResult.setError(1);
			picUploadResult.setMessage("服务器无响应!");
		    return picUploadResult;
		}
	    return picUploadResult;
	}
	
	
	
	
}
