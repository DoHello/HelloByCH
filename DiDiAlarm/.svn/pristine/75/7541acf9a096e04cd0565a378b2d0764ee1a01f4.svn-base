<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
  	
  	<context:component-scan base-package="com.dy,com.derbysoft" />
	<!-- 定义任务bean -->
	



	<bean name="paymentOrderJobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<!-- 指定具体的job类 -->
		<property name="jobClass"  value="com.derbysoft.controller.appgms.OrderQuartz" />
		<!-- 指定job的名称 -->
		<property name="name" value="paymentOrder" />
		<!-- 指定job的分组 -->
		<property name="group" value="Order" />
		<!-- 必须设置为true，如果为false，当没有活动的触发器与之关联时会在调度器中删除该任务  -->
		<property name="durability" value="true"/>
		<!-- 指定spring容器的key，如果不设定在job中的jobmap中是获取不到spring容器的 -->
		<property name="applicationContextJobDataKey" value="applicationContext"/>
	</bean>
	<bean name="paymentOrderJobDetail1" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<!-- 指定具体的job类 -->
		<property name="jobClass"  value="com.derbysoft.controller.appgms.RedisQuartz" />
		<!-- 指定job的名称 -->
		<property name="name" value="numRedis" />
		<!-- 指定job的分组 -->
		<property name="group" value="Redis" />
		<!-- 必须设置为true，如果为false，当没有活动的触发器与之关联时会在调度器中删除该任务  -->
		<property name="durability" value="true"/>
		<!-- 指定spring容器的key，如果不设定在job中的jobmap中是获取不到spring容器的 -->
		<property name="applicationContextJobDataKey" value="applicationContext"/>
	</bean>
	<bean name="paymentOrderJobDetail2" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<!-- 指定具体的job类 -->
		<property name="jobClass"  value="com.derbysoft.controller.appgms.RedisCallQuartz" />
		<!-- 指定job的名称 -->
		<property name="name" value="callRedis" />
		<!-- 指定job的分组 -->
		<property name="group" value="Redis" />
		<!-- 必须设置为true，如果为false，当没有活动的触发器与之关联时会在调度器中删除该任务  -->
		<property name="durability" value="true"/>
		<!-- 指定spring容器的key，如果不设定在job中的jobmap中是获取不到spring容器的 -->
		<property name="applicationContextJobDataKey" value="applicationContext"/>
	</bean>
	
	<!-- 定义触发器1:控制预约时间 -->
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="paymentOrderJobDetail" />
		<!-- 每一分钟执行一次 -->
		<property name="cronExpression" value="0 1 0 * * ?" />
	</bean>
	<!-- 定义触发器2 控制案件num-->
	<bean id="cronTrigger1" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="paymentOrderJobDetail1" />
		<!-- 每天0点执行一次 * * * * * ? -->
		<property name="cronExpression" value="0 0 0 * * ?" /> 
	</bean>
	<!-- 定义触发器3 控制报警时间反馈信息-->
	<bean id="cronTrigger2" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="paymentOrderJobDetail2" />
		<!-- 每过1分钟执行一次 * * * * * ? -->
		<property name="cronExpression" value="0 0/1 * * * ?" /> 
	</bean>
	<bean id="jobFactory" class="dy.hrtworkframe.factory.HrtJobFactory"></bean>
	<!-- 定义调度器 -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="jobFactory" ref="jobFactory"/>
	    <property name="triggers">
	        <list>
	            <ref bean="cronTrigger" />
	            <ref bean="cronTrigger1" />
	            <ref bean="cronTrigger2" />
	        </list>
	    </property>
	</bean>
</beans>
