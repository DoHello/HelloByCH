package com.derbysoft.controller.sys;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.derbysoft.entity.sys.SYS_Category;
import com.derbysoft.entity.sys.SYS_Company;
import com.derbysoft.entity.sys.SYS_RoleButton;
import com.derbysoft.entity.sys.SYS_User;
import com.derbysoft.enums.DataStatusEnum;

import dy.hrtworkframe.controller.base.BaseController;
import dy.hrtworkframe.dao.BaseDaoImpl;
import dy.hrtworkframe.db.SQLUtil;
import dy.hrtworkframe.entity.Pager;
import dy.hrtworkframe.entity.User;
import dy.hrtworkframe.util.Const;
import dy.hrtworkframe.util.ExportUtils;
import dy.hrtworkframe.util.MessageUtil;
import dy.hrtworkframe.util.PageData;
import dy.hrtworkframe.util.SortUtil;
import dy.hrtworkframe.util.UUIDUtil;

@Transactional
@Controller("company")
@RequestMapping("company.do")
public class CompanyController extends BaseController{

	@Autowired
	public BaseDaoImpl baseDaoImpl;
	
	@RequestMapping(params="p=view")
	public ModelAndView showListView(HttpSession session,@RequestParam("moduleID") String moduleID) throws Exception {
		SYS_User user = (SYS_User) session.getAttribute(Const.SESSION_USER);
		PageData pd = getPageData();
		try {
			//获取用户权限按钮
			String sql = "select * "
					+ " from SYS_RoleButton "
					+ " where ModuleID= '" + moduleID + "' and roleID = '"+user.getRoleID()+"' ;";
			pd.put("userbutton", baseDaoImpl.query(SYS_RoleButton.class, sql));
			mv.addObject("model", pd);
			mv.setViewName("/system/company/system_company_view");
		} catch (Exception e) {
			return MessageUtil.exception(user, mv, e);
		}
		return MessageUtil.success(mv);
	}
	@RequestMapping(params = "p=add")
	public @ResponseBody Map<String,Object> add(@ModelAttribute SYS_Company  entity, HttpSession session) {
		SYS_User user = (SYS_User) session.getAttribute(Const.SESSION_USER);
		try {
			entity.setCompanyID(UUIDUtil.get32UUID());
			entity.setStatus(DataStatusEnum.TAKE_EFFECT.getValue());
			baseDaoImpl.insert(entity);
		} catch (Exception e) {
			return MessageUtil.exception(user, e);
		}
		
		return MessageUtil.success();
	}
	
	
	@RequestMapping(params = "p=eyeView")
	public ModelAndView showEyeView(SYS_Company entity, HttpSession session) {
		SYS_User user = (SYS_User) session.getAttribute(Const.SESSION_USER);
		pd = getPageData();
		pd.put("entity", baseDaoImpl.queryByPrimary(entity));
		try {
			List<SYS_Category> categories = baseDaoImpl.query(SYS_Category.class);
			pd.put("category", categories);
			mv.addObject("model", pd);
			mv.setViewName("/system/company/system_company_eye");
			
		} catch (Exception e) {
			return MessageUtil.exception(user, mv, e);
		}
		
		return MessageUtil.success(mv);
	}
	
	

	
	
	@RequestMapping(params = "p=showAddView")
	public ModelAndView showAddView(@ModelAttribute SYS_Company entity, HttpSession session) {
		SYS_User user = (SYS_User) session.getAttribute(Const.SESSION_USER);
		try {
			List<SYS_Category> categories = baseDaoImpl.query(SYS_Category.class);
			mv.addObject("model", getPageData().put("category", categories));
			mv.setViewName("/system/company/system_company_add");
		} catch (Exception e) {
			return MessageUtil.exception(user, mv, e);
		}
		
		return MessageUtil.success(mv);
	}
	
	
	
	@RequestMapping(params = "p=edit")
	public @ResponseBody Map<String,Object> edit(@ModelAttribute SYS_Company entity, HttpSession session) throws Exception {
		SYS_User user = (SYS_User) session.getAttribute(Const.SESSION_USER);
		try {
				baseDaoImpl.update(entity);
		} catch (Exception e) {
			return MessageUtil.exception(user, e);
		}
		return MessageUtil.success();
	}
	
	
	@RequestMapping(params = "p=del")
	public @ResponseBody Map<String,Object> del(@ModelAttribute SYS_Company entity, HttpSession session) {
		SYS_User user = (SYS_User) session.getAttribute(Const.SESSION_USER);
		try {
			entity.setStatus(DataStatusEnum.DELETE.getValue());
			baseDaoImpl.update(entity);
		} catch (Exception e) {
			return MessageUtil.exception(user, e);
		}
		
		return MessageUtil.success();
	}
	
	
	@RequestMapping(params = "p=find")
	public @ResponseBody Pager find( Pager pager, HttpSession session,
			HttpServletRequest request, HttpServletResponse response) {
		try {
			String w = " and companyName like ?  "+ SQLUtil.getWhereClause(pager);
				List<Object> args = new ArrayList<Object>();
				args.add("%"+pager.getParameters().get("searchText")+"%");
				if (pager.getIsExport()) {
					if (pager.getExportAllData()) {
						pager.setExportDatas(baseDaoImpl.query(SQLUtil.getQuerySQL(SYS_Company.class)));
					}
					try {
						ExportUtils.export(request, response, pager);
					} catch (Exception e) {
						e.printStackTrace();
					}
					return null;
				}
			
				if (pager.getPageSize() == 0) {
					
					String sql = SQLUtil.getQuerySQL(SYS_Company.class) + " where " + w;
					pager.setExhibitDatas(baseDaoImpl.query(SYS_Company.class, sql,args.toArray()));
					} else {
					pager.setAdvanceQuerySorts(SortUtil.sortBuild1("DicID", "desc"));
					baseDaoImpl.queryCount(pager, SYS_Company.class, w, args.toArray());
					baseDaoImpl.queryPager(SYS_Company.class, w, args.toArray(), pager);
					pager.setIsSuccess(true);
				}
		} catch (Exception e) {
			e.printStackTrace();
			pager.setIsSuccess(false);
		}
		
		pager.setIsSuccess(true);
		return pager;
	}
}
